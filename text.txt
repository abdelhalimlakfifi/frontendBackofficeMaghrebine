  // POST
  // const handleSubmit = async () => {
  //   try {
  //     if (!formData.name || !imagePreview) {
  //       toast.current.show({
  //         severity: "error",
  //         summary: "Validation Error",
  //         detail: "all Fields are required.",
  //         life: 3000,
  //       });
  //       return;
  //     }

  //     // Extract the file name from the image preview
  //     const fileName = imageName;

  //     // Generate a unique id for Server Json
  //     const id = uuidv4();
  //     // for my data
  //     const _id = uuidv4();

  //     const newFormData = { id, _id, ...formData, image: fileName };

  //     const response = await axios.post(
  //       "http://localhost:3000/types",
  //       newFormData
  //     );

  //     console.log("Response:", response.data);
  //     clearForm();
  //     setSubmitted(true);
  //     setNewDialogVisible(false);

  //     toast.current.show({
  //       severity: "success",
  //       summary: "Success",
  //       detail: "Type added successfully.",
  //       life: 3000,
  //     });
  //   } catch (error) {
  //     console.error("Error submitting form:", error);

  //     toast.current.show({
  //       severity: "error",
  //       summary: "Error",
  //       detail: "An error occurred while submitting the form.",
  //       life: 3000,
  //     });
  //   }
  // };


  // const handleSubmit = async () => {
  //   try {
  //     // Create a FormData object to send the file and other form data
  //     const formData = new FormData();
  //     formData.append('name', formData.name);
  //     formData.append('active', formData.active);
  //     formData.append('image', imageRef.current.files[0]); // Assuming imageRef is a ref to your file input

  //     // Make a POST request to your backend
  //     const response = await axios.post('localhost:3000/api/type/store', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data', // Set the content type to multipart/form-data for file uploads
  //       },
  //     });

  //     // Handle the response (e.g., show a success message)
  //     console.log(response.data);

  //     // Close the dialog or perform any other actions after successful submission
  //     hideDialog(setSubmitted, setNewDialogVisible);
  //   } catch (error) {
  //     // Handle errors (e.g., show an error message)
  //     console.error('Error submitting form:', error);
  //   }
  // };



    // DELETE Should fix it
  const handleDelete = async () => {
    try {
      console.log(selectedTypes);
      // Extract the array of IDs from selectedTypes
      const idsToDelete = selectedTypes.map((type) => type.id);
      console.log(idsToDelete);

      await axios.delete(`http://localhost:3000/types/${idsToDelete}`);

      toast.current.show({
        severity: "success",
        summary: "Success",
        detail: "Types deleted successfully.",
        life: 3000,
      });

      setSubmitted(true);
      setSelectedTypes(null);
    } catch (error) {
      console.error("Error deleting types:", error);
      toast.current.show({
        severity: "error",
        summary: "Error",
        detail: "An error occurred while deleting types.",
        life: 3000,
      });
    }
  };








db nta dayr f schema 
 active: {
            type: Boolean,
            require:true,
            default: true 
        },

w ana mni kandir new type n9ed n3tih true wla false o backend mafihch  active: req.body.active, 
w kangol laaaaaaaaaaaaaaaach kiyakhod true 